/*  Simplied and enhanced version of fetch API  */
import store from '@/store';
const serverURL = process.env.NODE_ENV === 'development' ?
  'http://192.168.50.138:3000' : 'https://carllllo.work/api';
const RETRY_TIMES = 3;
let retryCount = 0;

function fetchJSON(api, init, withCookie = true) {
  // If no response in 5 seconds, abort the request
  const controller = new AbortController();
  const signal = controller.signal;
  const id = setTimeout(() => controller.abort(), 6000);

  // Add timestamp to avoid cache result
  const requestURL = serverURL + api + '?timestamp=' + Date.now();

  let requestBody;
  // if cookie is available, include it in the request
  if (store.state.auth.cookie && withCookie) {
    requestBody = JSON.stringify({
      ...init,
      credentials: 'include',
      cookie: store.state.auth.cookie,
    });
  } else {
    requestBody = JSON.stringify({
      ...init,
    });
  }

  // return a promise generated by a 'post' fetch
  return fetch(requestURL, {
    method: 'post',
    headers: {'Content-Type': 'application/json;charset=utf-8'},
    body: requestBody,
    signal
  })
    .then((body) => {
      // cancel the abortion timer when response arrived
      clearTimeout(id);
      if (body.ok) {
        return body.json();
      } else if (body.status === 301) {
        store.commit('auth/logout');
        console.log('Not loged in.');
      } else {
        throw new Error('Request failed: ' +
          body.status + ' ' + body.statusText);
      }
    })
    // retry while request failed
    .catch((err) => {
      if (err.message.includes('404')) {
        alert('该资源不存在');
        return Promise.reject(err);
      } else if (retryCount > RETRY_TIMES) {
        retryCount = 0;
        console.log('请求超时，请重试。');
        console.log(err);
        if (err.name === 'AbortError') {
          alert('服务器长时间无响应，请检查您的网络');
          return Promise.reject(new Error('Request timeout'));
        }
      } else {
        // remind the user if retry for twice or more
        if (err.name === 'AbortError' && retryCount > 1) {
          alert('网络似乎有点慢，正在重试……');
        }
        retryCount++;
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve(fetchJSON(api, init));
          }, 500 * retryCount);
        });
      }
    });
}

export default fetchJSON;
